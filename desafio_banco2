import textwrap

class Usuario:
    def __init__(self, nome, data_nascimento, cpf, endereco):
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf
        self.endereco = endereco

class Conta:
    def __init__(self, agencia, numero, usuario):
        self.agencia = agencia
        self.numero = numero
        self.usuario = usuario
        self.saldo = 0.0
        self.extrato = []

    def visualizar_historico(self):
        print("\n================ EXTRATO ================")
        if not self.extrato:
            print("Não foram realizadas movimentações.")
        else:
            for operacao in self.extrato:
                print(operacao)
        print(f"\nSaldo: R$ {self.saldo:.2f}")
        print("==========================================")

def depositar(saldo, valor, extrato, /):
    if valor > 0:
        saldo += valor
        extrato.append(f"Depósito: R$ {valor:.2f}")
        print("\nDepósito realizado com sucesso!")
        return saldo, extrato
    else:
        print("\nOperação falhou! O valor informado é inválido.")
        return saldo, extrato

def sacar(*, saldo, valor, extrato, limite, numero_saques, limite_saques):
    excedeu_saldo = valor > saldo
    excedeu_limite = valor > limite
    excedeu_saques = numero_saques >= limite_saques

    if excedeu_saldo:
        print("\nOperação falhou! Você não tem saldo suficiente.")
    elif excedeu_limite:
        print("\nOperação falhou! O valor do saque excede o limite.")
    elif excedeu_saques:
        print("\nOperação falhou! Número máximo de saques excedido.")
    elif valor > 0:
        saldo -= valor
        extrato.append(f"Saque: R$ {valor:.2f}")
        print("\nSaque realizado com sucesso!")
        return saldo, extrato
    else:
        print("\nOperação falhou! O valor informado é inválido.")
    
    return saldo, extrato

def criar_usuario(usuarios):
    cpf = input("Informe o CPF (somente números): ")
    usuario_existente = filtrar_usuario(cpf, usuarios)

    if usuario_existente:
        print("\nOperação falhou! Já existe um usuário com este CPF.")
        return

    nome = input("Informe o nome completo: ")
    data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")
    endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/estado): ")

    novo_usuario = Usuario(nome=nome, data_nascimento=data_nascimento, cpf=cpf, endereco=endereco)
    usuarios.append(novo_usuario)
    print("\nUsuário criado com sucesso!")

def criar_conta_corrente(agencia, numero_conta, usuarios, contas):
    """
    Função para criar uma nova conta corrente.
    """
    cpf = input("Informe o CPF do usuário: ")
    usuario = filtrar_usuario(cpf, usuarios)

    if not usuario:
        print("\nOperação falhou! Usuário não encontrado, por favor crie o usuário primeiro.")
        return

    nova_conta = Conta(agencia=agencia, numero=numero_conta, usuario=usuario)
    contas.append(nova_conta)
    print(f"\nConta criada com sucesso! Agência: {agencia}, Número: {numero_conta}")

def filtrar_usuario(cpf, usuarios):
    usuarios_filtrados = [usuario for usuario in usuarios if usuario.cpf == cpf]
    return usuarios_filtrados[0] if usuarios_filtrados else None

def filtrar_conta(numero_conta, contas):
    contas_filtradas = [conta for conta in contas if conta.numero == numero_conta]
    return contas_filtradas[0] if contas_filtradas else None

def main():
    AGENCIA = "0001"
    LIMITE_SAQUES = 3
    LIMITE_VALOR_SAQUE = 500
    
    usuarios = []
    contas = []
    num_saques_por_conta = {}

    menu = """\n
    [d] Depositar
    [s] Sacar
    [e] Extrato
    [nu] Novo usuário
    [nc] Nova conta
    [q] Sair
    => """

    while True:
        opcao = input(textwrap.dedent(menu))

        if opcao == "d":
            numero_conta = int(input("Informe o número da conta: "))
            conta = filtrar_conta(numero_conta, contas)
            if conta:
                valor = float(input("Informe o valor do depósito: "))
                conta.saldo, conta.extrato = depositar(conta.saldo, valor, conta.extrato)
            else:
                print("\nConta não encontrada!")

        elif opcao == "s":
            numero_conta = int(input("Informe o número da conta: "))
            conta = filtrar_conta(numero_conta, contas)
            if conta:
                num_saques_por_conta.setdefault(numero_conta, 0)
                valor = float(input("Informe o valor do saque: "))
                
                saldo_novo, extrato_novo = sacar(
                    saldo=conta.saldo,
                    valor=valor,
                    extrato=conta.extrato,
                    limite=LIMITE_VALOR_SAQUE,
                    numero_saques=num_saques_por_conta[numero_conta],
                    limite_saques=LIMITE_SAQUES
                )
                
                if saldo_novo is not None:
                    conta.saldo = saldo_novo
                    conta.extrato = extrato_novo
                    num_saques_por_conta[numero_conta] += 1
            else:
                print("\nConta não encontrada!")
            
        elif opcao == "e":
            numero_conta = int(input("Informe o número da conta: "))
            conta = filtrar_conta(numero_conta, contas)
            if conta:
                conta.visualizar_historico()
            else:
                print("\nConta não encontrada!")

        elif opcao == "nu":
            criar_usuario(usuarios)
            
        elif opcao == "nc":
            numero_conta = len(contas) + 1
            criar_conta_corrente(AGENCIA, numero_conta, usuarios, contas)

        elif opcao == "q":
            break

        else:
            print("\nOperação inválida, por favor selecione a opção desejada.")

main()
